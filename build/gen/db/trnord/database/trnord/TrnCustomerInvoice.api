-----------------------------------------------------------------------------
--
--  Logical unit: TrnCustomerInvoice
--  Type:         EntityWithState
--  Component:    TRNORD
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 PRE-PROCESSING -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Trn_Customer_Invoice_API context

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Database_SYS.Create_Context('TrnCustomerInvoice_CTX', 'DOMAIN_SYS', NULL, 'GLOBALLY', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating Trn_Customer_Invoice_API specification

-- [IFS COMPLETE BLOCK PACKAGE Trn_Customer_Invoice_API]
CREATE OR REPLACE PACKAGE Trn_Customer_Invoice_API IS

module_                   CONSTANT VARCHAR2(6)      := 'TRNORD';
lu_name_                  CONSTANT VARCHAR2(30)     := 'TrnCustomerInvoice';
lu_type_                  CONSTANT VARCHAR2(30)     := 'EntityWithState';
  
DB_FULLY_PAID             CONSTANT VARCHAR2(9)      := 'FullyPaid';
DB_PARTIALLY_PAID         CONSTANT VARCHAR2(13)     := 'PartiallyPaid';
DB_UNPAID                 CONSTANT VARCHAR2(6)      := 'Unpaid';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (company_id                     TRN_CUSTOMER_INVOICE_TAB.company_id%TYPE,
   branch_id                      TRN_CUSTOMER_INVOICE_TAB.branch_id%TYPE,
   invoice_id                     TRN_CUSTOMER_INVOICE_TAB.invoice_id%TYPE,
   "rowid"                        rowid,
   rowversion                     TRN_CUSTOMER_INVOICE_TAB.rowversion%TYPE,
   rowkey                         TRN_CUSTOMER_INVOICE_TAB.rowkey%TYPE,
   rowstate                       TRN_CUSTOMER_INVOICE_TAB.rowstate%TYPE,
   payment_terms                  TRN_CUSTOMER_INVOICE_TAB.payment_terms%TYPE,
   customer_id                    TRN_CUSTOMER_INVOICE_TAB.customer_id%TYPE,
   order_id                       TRN_CUSTOMER_INVOICE_TAB.order_id%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Payment_Terms
--   Fetches the PaymentTerms attribute for a record.
--
-- Get_Payment_Terms_Db
--   Fetches the DB value of PaymentTerms attribute for a record.
--
-- Get_Customer_Id
--   Fetches the CustomerId attribute for a record.
--
-- Get_Order_Id
--   Fetches the OrderId attribute for a record.
--
-- Get_State
--   Fetches the State attribute for a record.
--
-- Get_Objstate
--   Fetches the Objstate attribute for a record.
--
-- Get_Objevents
--   Fetches the Objevents attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN trn_customer_invoice_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER );

--@PoReadOnly(Exists)
FUNCTION Exists (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Payment_Terms)
FUNCTION Get_Payment_Terms (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Payment_Terms_Db)
FUNCTION Get_Payment_Terms_Db (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN trn_customer_invoice_tab.payment_terms%TYPE;

--@PoReadOnly(Get_Customer_Id)
FUNCTION Get_Customer_Id (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN NUMBER;

--@PoReadOnly(Get_Order_Id)
FUNCTION Get_Order_Id (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN NUMBER;

--@PoReadOnly(Get_State)
FUNCTION Get_State (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Objstate)
FUNCTION Get_Objstate (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Objevents)
FUNCTION Get_Objevents (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Create_Invoice
--
-- Calculate_Invoice_Total
-----------------------------------------------------------------------------

PROCEDURE Create_Invoice (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ OUT NUMBER,
   invoice_amount_ IN NUMBER,
   customer_id_ IN NUMBER,
   order_id_ IN NUMBER );

FUNCTION Calculate_Invoice_Total (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   invoice_id_ IN NUMBER ) RETURN NUMBER;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------
-- Finite_State_Init_
--   Runs the initial start event for a basedOn child entity.
--
-- Finite_State_Decode__
--   Returns the client equivalent for any database representation of
--   a state name = objstate.
--
-- Finite_State_Encode__
--   Returns the database equivalent for any client representation of
--   a state name = state.
--
-- Enumerate_States__
--   Returns a list of all possible finite states in client terminology.
--
-- Enumerate_States_Db__
--   Returns a list of all possible finite states in database terminology.
--
-- Finite_State_Events__
--   Returns a list of allowed events for a given state
--   NOTE! Regardless of conditions if not otherwize encoded
--
-- Enumerate_Events__
--   Returns a list of all possible events.
--
-- Pay__
--   Executes the Pay event logic as defined in the state machine.
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY trn_customer_invoice_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

--@PoReadOnly(Finite_State_Decode__)
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Finite_State_Encode__)
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate_States__)
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 );

--@PoReadOnly(Enumerate_States_Db__)
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 );

--@PoReadOnly(Finite_State_Events__)
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate_Events__)
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 );

PROCEDURE Pay__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Language_Refreshed
--   Framework method that updates translations to a new language.
--
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Language_Refreshed)
PROCEDURE Language_Refreshed;

--@PoReadOnly(Init)
PROCEDURE Init;

END Trn_Customer_Invoice_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


