-----------------------------------------------------------------------------
--
--  Logical unit: TrnReservation
--  Type:         Entity
--  Component:    TRNORD
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Trn_Reservation_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Trn_Reservation_API]
CREATE OR REPLACE PACKAGE BODY Trn_Reservation_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (company_id                     BOOLEAN := FALSE,
   reservation_id                 BOOLEAN := FALSE,
   branch_id                      BOOLEAN := FALSE,
   order_id                       BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN trn_reservation_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN trn_reservation_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN trn_reservation_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN trn_reservation_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN trn_reservation_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN trn_reservation_tab%ROWTYPE,
   newrec_ IN trn_reservation_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     trn_reservation_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     trn_reservation_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     trn_reservation_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN trn_reservation_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN trn_reservation_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN trn_reservation_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Next_Reservation_Id___ RETURN NUMBER;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN trn_reservation_tab%ROWTYPE
IS
   rec_ trn_reservation_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT company_id, reservation_id
      INTO  rec_.company_id, rec_.reservation_id
      FROM  trn_reservation_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.company_id, rec_.reservation_id, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER )
IS
BEGIN
   IF (NOT Check_Exist___(company_id_, reservation_id_)) THEN
      Raise_Record_Not_Exist___(company_id_, reservation_id_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(company_id_, reservation_id_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   company_id_ trn_reservation_tab.company_id%TYPE;
   reservation_id_ trn_reservation_tab.reservation_id%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT company_id, reservation_id
   INTO  company_id_, reservation_id_
   FROM  trn_reservation_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(company_id_, reservation_id_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Branch_Id (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ trn_reservation_tab.branch_id%TYPE;
BEGIN
   IF (company_id_ IS NULL OR reservation_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT branch_id
      INTO  temp_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get_Branch_Id');
END Get_Branch_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Id (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN NUMBER
IS
   temp_ trn_reservation_tab.order_id%TYPE;
BEGIN
   IF (company_id_ IS NULL OR reservation_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_id
      INTO  temp_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get_Order_Id');
END Get_Order_Id;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ trn_reservation_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.company_id, rowrec_.reservation_id);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (company_id_ IS NULL OR reservation_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT company_id, reservation_id, rowid, rowversion, rowkey,
          branch_id, 
          order_id
      INTO  temp_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2
IS
   rowkey_ trn_reservation_tab.rowkey%TYPE;
BEGIN
   IF (company_id_ IS NULL OR reservation_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ trn_reservation_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   trn_reservation_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   trn_reservation_tab%ROWTYPE;
   newrec_   trn_reservation_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ trn_reservation_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'COMPANY_ID', company_id_);
   Message_SYS.Add_Attribute(msg_, 'RESERVATION_ID', reservation_id_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'COMPANY_ID', Fnd_Session_API.Get_Language) || ': ' || company_id_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'RESERVATION_ID', Fnd_Session_API.Get_Language) || ': ' || reservation_id_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(company_id_, reservation_id_),
                            Formatted_Key___(company_id_, reservation_id_));
   Error_SYS.Fnd_Too_Many_Rows(Trn_Reservation_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(company_id_, reservation_id_),
                            Formatted_Key___(company_id_, reservation_id_));
   Error_SYS.Fnd_Record_Not_Exist(Trn_Reservation_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN trn_reservation_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.company_id, rec_.reservation_id),
                            Formatted_Key___(rec_.company_id, rec_.reservation_id));
   Error_SYS.Fnd_Record_Exist(Trn_Reservation_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN trn_reservation_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Trn_Reservation_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Trn_Reservation_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN trn_reservation_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.company_id, rec_.reservation_id),
                            Formatted_Key___(rec_.company_id, rec_.reservation_id));
   Error_SYS.Fnd_Record_Modified(Trn_Reservation_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(company_id_, reservation_id_),
                            Formatted_Key___(company_id_, reservation_id_));
   Error_SYS.Fnd_Record_Locked(Trn_Reservation_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(company_id_, reservation_id_),
                            Formatted_Key___(company_id_, reservation_id_));
   Error_SYS.Fnd_Record_Removed(Trn_Reservation_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN trn_reservation_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        trn_reservation_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  trn_reservation_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  trn_reservation_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER) RETURN trn_reservation_tab%ROWTYPE
IS
   rec_        trn_reservation_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  trn_reservation_tab
         WHERE company_id = company_id_
         AND   reservation_id = reservation_id_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(company_id_, reservation_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER) RETURN trn_reservation_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        trn_reservation_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  trn_reservation_tab
         WHERE company_id = company_id_
         AND   reservation_id = reservation_id_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(company_id_, reservation_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(company_id_, reservation_id_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN trn_reservation_tab%ROWTYPE
IS
   lu_rec_ trn_reservation_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  trn_reservation_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN trn_reservation_tab%ROWTYPE
IS
   lu_rec_ trn_reservation_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (company_id_ IS NULL OR reservation_id_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  trn_reservation_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  trn_reservation_tab
      WHERE company_id = company_id_
      AND   reservation_id = reservation_id_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(company_id_, reservation_id_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('COMPANY_ID') THEN
         newrec_.company_id := value_;
         indrec_.company_id := TRUE;
      WHEN ('RESERVATION_ID') THEN
         newrec_.reservation_id := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.reservation_id := TRUE;
      WHEN ('BRANCH_ID') THEN
         newrec_.branch_id := value_;
         indrec_.branch_id := TRUE;
      WHEN ('ORDER_ID') THEN
         newrec_.order_id := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.order_id := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.company_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
   END IF;
   IF (rec_.reservation_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RESERVATION_ID', rec_.reservation_id, attr_);
   END IF;
   IF (rec_.branch_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BRANCH_ID', rec_.branch_id, attr_);
   END IF;
   IF (rec_.order_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN trn_reservation_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.company_id) THEN
      Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
   END IF;
   IF (indrec_.reservation_id) THEN
      Client_SYS.Add_To_Attr('RESERVATION_ID', rec_.reservation_id, attr_);
   END IF;
   IF (indrec_.branch_id) THEN
      Client_SYS.Add_To_Attr('BRANCH_ID', rec_.branch_id, attr_);
   END IF;
   IF (indrec_.order_id) THEN
      Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
   Client_SYS.Add_To_Attr('RESERVATION_ID', rec_.reservation_id, attr_);
   Client_SYS.Add_To_Attr('BRANCH_ID', rec_.branch_id, attr_);
   Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN trn_reservation_tab%ROWTYPE
IS
   rec_ trn_reservation_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.company_id                     := public_.company_id;
   rec_.reservation_id                 := public_.reservation_id;
   rec_.branch_id                      := public_.branch_id;
   rec_.order_id                       := public_.order_id;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.company_id                     := rec_.company_id;
   public_.reservation_id                 := rec_.reservation_id;
   public_.branch_id                      := rec_.branch_id;
   public_.order_id                       := rec_.order_id;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN trn_reservation_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.company_id := rec_.company_id IS NOT NULL;
   indrec_.reservation_id := rec_.reservation_id IS NOT NULL;
   indrec_.branch_id := rec_.branch_id IS NOT NULL;
   indrec_.order_id := rec_.order_id IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN trn_reservation_tab%ROWTYPE,
   newrec_ IN trn_reservation_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.company_id := Validate_SYS.Is_Changed(oldrec_.company_id, newrec_.company_id);
   indrec_.reservation_id := Validate_SYS.Is_Changed(oldrec_.reservation_id, newrec_.reservation_id);
   indrec_.branch_id := Validate_SYS.Is_Changed(oldrec_.branch_id, newrec_.branch_id);
   indrec_.order_id := Validate_SYS.Is_Changed(oldrec_.order_id, newrec_.order_id);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     trn_reservation_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (newrec_.company_id IS NOT NULL)
   AND (indrec_.company_id)
   AND (Validate_SYS.Is_Changed(oldrec_.company_id, newrec_.company_id)) THEN
      Trn_Company_API.Exist(newrec_.company_id);
   END IF;
   IF (newrec_.company_id IS NOT NULL AND newrec_.branch_id IS NOT NULL AND newrec_.order_id IS NOT NULL)
   AND (indrec_.company_id OR indrec_.branch_id OR indrec_.order_id)
   AND (Validate_SYS.Is_Changed(oldrec_.company_id, newrec_.company_id)
     OR Validate_SYS.Is_Changed(oldrec_.branch_id, newrec_.branch_id)
     OR Validate_SYS.Is_Changed(oldrec_.order_id, newrec_.order_id)) THEN
      Trn_Customer_Order_API.Exist(newrec_.company_id, newrec_.branch_id, newrec_.order_id);
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'COMPANY_ID', newrec_.company_id);
   Error_SYS.Check_Not_Null(lu_name_, 'RESERVATION_ID', newrec_.reservation_id);
   Error_SYS.Check_Not_Null(lu_name_, 'BRANCH_ID', newrec_.branch_id);
   Error_SYS.Check_Not_Null(lu_name_, 'ORDER_ID', newrec_.order_id);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   oldrec_ trn_reservation_tab%ROWTYPE;
BEGIN
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     trn_reservation_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Validate_SYS.Item_Update(lu_name_, 'COMPANY_ID', indrec_.company_id);
   Validate_SYS.Item_Update(lu_name_, 'RESERVATION_ID', indrec_.reservation_id);
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     trn_reservation_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   value_too_large  EXCEPTION;
   PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
BEGIN
   newrec_.rowversion := sysdate;
   IF by_keys_ THEN
      UPDATE trn_reservation_tab
         SET ROW = newrec_
         WHERE company_id = newrec_.company_id
         AND   reservation_id = newrec_.reservation_id;
   ELSE
      UPDATE trn_reservation_tab
         SET ROW = newrec_
         WHERE rowid = objid_;
   END IF;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      DECLARE
         constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
      BEGIN
         IF (constraint_ = 'TRN_RESERVATION_RK') THEN
            Error_SYS.Fnd_Rowkey_Exist(Trn_Reservation_API.lu_name_, newrec_.rowkey);
         ELSIF (constraint_ = 'TRN_RESERVATION_PK') THEN
            Raise_Record_Exist___(newrec_);
         ELSE
            Raise_Constraint_Violated___(newrec_, constraint_);
         END IF;
      END;
   WHEN value_too_large THEN
      Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     trn_reservation_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.company_id, newrec_.reservation_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.company_id, newrec_.reservation_id);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN trn_reservation_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.company_id||'^'||remrec_.reservation_id||'^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN trn_reservation_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.company_id||'^'||remrec_.reservation_id||'^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   IF (objid_ IS NOT NULL) THEN
      DELETE
         FROM  trn_reservation_tab
         WHERE rowid = objid_;
   ELSE
      DELETE
         FROM  trn_reservation_tab
         WHERE company_id = remrec_.company_id
         AND   reservation_id = remrec_.reservation_id;
   END IF;
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN trn_reservation_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     trn_reservation_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.company_id, remrec_.reservation_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.company_id, remrec_.reservation_id);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Create_Reservation (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   order_id_ IN NUMBER,
   row_no_ IN NUMBER,
   product_id_ IN NUMBER,
   inventory_id_ IN NUMBER,
   quantity_ IN NUMBER )
IS
   CURSOR get_reservation_id IS
      SELECT reservation_id
      FROM TRN_RESERVATION_TAB
      WHERE company_id = company_id_
      AND branch_id = branch_id_
      AND order_id = order_id_;
   reservation_id_    NUMBER;
   rec_               TRN_RESERVATION_TAB %ROWTYPE;
   objid_             VARCHAR2(2000);
   objversion_        VARCHAR2(2000);
   attr_              VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'Create_Reservation');
   OPEN get_reservation_id;
   FETCH get_reservation_id INTO reservation_id_;
   IF get_reservation_id%FOUND THEN
      null;
   ELSE
      rec_.company_id := company_id_;
      rec_.branch_id := branch_id_;
      rec_.order_id := order_id_;
      Insert___(objid_, objversion_, rec_, attr_);
      reservation_id_ := Client_SYS.Get_Item_Value('RESERVATION_ID', attr_);
   END IF;
   CLOSE get_reservation_id;
   Trn_Reservation_Item_Api.Create_Reservation_Item(company_id_,
                                                     branch_id_,
                                                     reservation_id_,
                                                     inventory_id_,
                                                     product_id_,
                                                     order_id_,
                                                     row_no_,
                                                     quantity_);
END Create_Reservation;


PROCEDURE Invoice_Reservation (
   company_id_ IN VARCHAR2,
   branch_id_ IN VARCHAR2,
   order_id_ IN NUMBER )
IS
   CURSOR get_gerservation_id IS
      SELECT Reservation_Id
      FROM TRN_RESERVATION_TAB
      WHERE Company_Id = company_id_
      AND Branch_Id = branch_id_
      AND Order_Id = order_id_;

   rec_              TRN_RESERVATION_TAB%ROWTYPE;
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   reservation_id_   NUMBER;
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'Invoice_Reservation');
   OPEN get_gerservation_id;
   FETCH get_gerservation_id INTO reservation_id_;
   IF get_gerservation_id%FOUND THEN
      Get_Id_Version_By_Keys___(objid_, objversion_, company_id_, reservation_id_);
      rec_ := Lock_By_Id___(objid_, objversion_);
      Delete___(objid_, rec_);
   END IF;
   CLOSE get_gerservation_id;
END Invoice_Reservation;


PROCEDURE Remove_Reservation (
   company_id_ IN VARCHAR2,
   reservation_id_ IN NUMBER,
   row_id_ IN VARCHAR2 )
IS
   remrec_ TRN_RESERVATION_TAB%ROWTYPE;
   objid_  TRN_RESERVATION.objid%TYPE;
BEGIN
   General_SYS.Init_Method(Trn_Reservation_API.lu_name_, 'Trn_Reservation_API', 'Remove_Reservation');
   objid_ := row_id_;
   remrec_ := Lock_By_Keys___(company_id_,reservation_id_);
   Check_Delete___(remrec_);
   Delete___(objid_, remrec_);
END Remove_Reservation;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO trn_reservation_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'TRN_RESERVATION_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'TRN_RESERVATION_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY trn_reservation_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      --Add pre-processing code here
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
      newrec_.reservation_id := Get_Next_Reservation_Id___();
      Client_SYS.Add_To_Attr('RESERVATION_ID', newrec_.reservation_id, attr_);
     
      Base(objid_, objversion_, newrec_, attr_);
      --Add post-processing code here
   END Core;

BEGIN
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


FUNCTION Get_Next_Reservation_Id___ RETURN NUMBER
IS
   CURSOR get_reservation_id IS
      SELECT Trn_Reservation_Id_SEQ.NEXTVAL
      FROM DUAL;
   temp_ NUMBER;
BEGIN
   OPEN get_reservation_id;
   FETCH get_reservation_id INTO temp_;
   CLOSE get_reservation_id;
   RETURN temp_;
END Get_Next_Reservation_Id___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Trn_Reservation_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Trn_Reservation_API TO IFSSYS
/
